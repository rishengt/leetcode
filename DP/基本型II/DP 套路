DP套路（II）：第II类基本型（"时间序列型"加强版）

给出一个序列（数组/字符串），其中每一个元素可以认定为"一天"，： 但"今天"的状态和之前的"某一天"有关，需要挑选。

    Minimum cost for tickets
    Longest Increasing Subsequence

套路：
    定义dp[i]: 表示第i-th轮的状态，一般这个状态要求和元素i直接有关。
    千方百计将dp[i]与之前的状态dp[i']产生关系(i=1,2,....i-1)(比如sum，max，min）
        dp[i]肯定不能与大于i的轮次有任何关系，否则违反了DP的无后效性。
    最终的结果是dp[i]中的某一个